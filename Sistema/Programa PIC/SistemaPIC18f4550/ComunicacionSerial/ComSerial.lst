CCS PCH C Compiler, Version 5.008, 5967               21-oct-14 13:51

               Filename:   D:\IGNACIO\ProgramacionGitHub\MT325-TiempoReal\Sistema\Programa PIC\SistemaPIC18f4550\ComunicacionSerial\ComSerial.lst

               ROM used:   1092 bytes (3%)
                           Largest free fragment is 31672
               RAM used:   66 (3%) at main() level
                           94 (5%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   03AA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00F0
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0096:  TBLRD*+
0098:  MOVF   FF5,F
009A:  BZ    00B6
009C:  MOVFF  FF6,5B
00A0:  MOVFF  FF7,5C
00A4:  MOVF   FF5,W
00A6:  BTFSS  F9E.4
00A8:  BRA    00A6
00AA:  MOVWF  FAD
00AC:  MOVFF  5B,FF6
00B0:  MOVFF  5C,FF7
00B4:  BRA    0096
00B6:  RETURN 0
*
0110:  DATA 52,65
0112:  DATA 63,69
0114:  DATA 62,69
0116:  DATA 64,6F
0118:  DATA 00,00
011A:  DATA 63,61
011C:  DATA 72,67
011E:  DATA 61,64
0120:  DATA 6F,00
0122:  DATA 64,65
0124:  DATA 73,63
0126:  DATA 61,72
0128:  DATA 67,61
012A:  DATA 64,6F
012C:  DATA 00,00
*
0138:  CLRF   55
013A:  CLRF   56
013C:  MOVLW  01
013E:  MOVWF  57
0140:  CLRF   FDA
0142:  CLRF   FD9
0144:  CLRF   5A
0146:  MOVLW  4D
0148:  MOVWF  59
014A:  CLRF   FEA
014C:  MOVLW  51
014E:  MOVWF  FE9
0150:  MOVFF  5A,FE2
0154:  MOVFF  59,FE1
0158:  MOVFF  57,58
015C:  BCF    FD8.0
015E:  MOVF   FE5,W
0160:  MULWF  FEE
0162:  MOVF   FF3,W
0164:  ADDWFC 55,F
0166:  MOVF   FF4,W
0168:  ADDWFC 56,F
016A:  DECFSZ 58,F
016C:  BRA    015C
016E:  MOVFF  55,FDE
0172:  MOVFF  56,55
0176:  CLRF   56
0178:  BTFSC  FD8.0
017A:  INCF   56,F
017C:  INCF   59,F
017E:  BTFSC  FD8.2
0180:  INCF   5A,F
0182:  INCF   57,F
0184:  MOVF   57,W
0186:  SUBLW  05
0188:  BNZ   014A
018A:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #use delay(clock=10000000) 
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7,bits=8,parity=N) 
.................... #fuses HS,NOPROTECT,NOWDT,NOLVP,CPUDIV1,nomclr 
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_cycles(1); 
....................    high = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(2); 
....................    lcd_output_enable(0); 
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................   #endif 
....................  
....................    lcd_output_rs(0); 
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
....................    lcd_output_rs(address); 
....................    delay_cycles(1); 
....................    lcd_output_rw(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(0); 
....................    lcd_send_nibble(n >> 4); 
....................    lcd_send_nibble(n & 0xf); 
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................  #endif 
....................  
....................    lcd_output_rs(0); 
....................    lcd_output_rw(0); 
....................    lcd_output_enable(0); 
....................      
....................    delay_ms(15); 
....................    for(i=1;i<=3;++i) 
....................    { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................    } 
....................     
....................    lcd_send_nibble(2); 
....................    delay_ms(5); 
....................    for(i=0;i<=3;++i) 
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define Tiempo 200 
....................  
.................... #byte T0CON=0xFD5 
.................... #byte wreg=0xFE8 
.................... #byte TOSU=0xFFF 
.................... #byte TOSH=0xFFE 
.................... #byte TOSL=0xFFD 
....................  
.................... int const lenbuff=10; 
....................  
.................... int   xbuff=0x00; 
.................... char  cbuff[lenbuff]; 
.................... char  rcvchar=0x00; 
.................... char  comando; 
.................... int1  flagcmd=0; 
.................... int32 valor=0; 
.................... int32 valor2=0; 
.................... int32 val1,val2,val3,val4,val5; 
....................  
....................  
....................  
.................... void  addcbuff(char c); 
.................... void inte_Init()  // interrupcion de puerto serial 
.................... { 
....................    enable_interrupts(GLOBAL); 
*
012E:  MOVLW  C0
0130:  IORWF  FF2,F
....................    enable_interrupts(INT_RDA); 
0132:  BSF    F9D.5
0134:  GOTO   03E2 (RETURN)
.................... } 
....................  
....................  
.................... #INT_RDA 
.................... void serial_isr() 
.................... { 
....................    printf("Recibido");     // se envia por Serial una palabra para verificar interrupcion 
*
00F0:  MOVLW  10
00F2:  MOVWF  FF6
00F4:  MOVLW  01
00F6:  MOVWF  FF7
00F8:  RCALL  0096
....................    rcvchar = 0x00; 
00FA:  CLRF   22
....................    rcvchar = getc();    // se recibe el caracter enviado por la computadora 
00FC:  BTFSS  F9E.5
00FE:  BRA    00FC
0100:  MOVFF  FAE,22
....................    addcbuff(rcvchar);   // guarda el caracter en un buffer 
0104:  MOVFF  22,5B
0108:  BRA    00B8
010A:  BCF    F9E.5
010C:  GOTO   0054
.................... } 
....................  
.................... void addcbuff(char c)    
.................... { 
....................    switch(c) 
*
00B8:  MOVF   5B,W
00BA:  XORLW  2A
00BC:  BZ    00C0
00BE:  BRA    00D8
....................    { 
....................       case '*':                  // en caso de recibir *, levanta el flag para saber que se termino de enviar un comando. 
....................          cbuff[xbuff++] = c; 
00C0:  MOVF   17,W
00C2:  INCF   17,F
00C4:  CLRF   03
00C6:  ADDLW  18
00C8:  MOVWF  FE9
00CA:  MOVLW  00
00CC:  ADDWFC 03,W
00CE:  MOVWF  FEA
00D0:  MOVFF  5B,FEF
....................          flagcmd = 1; 
00D4:  BSF    24.0
....................       break; 
00D6:  BRA    00EC
....................       default: 
....................          cbuff[xbuff++] = c; 
00D8:  MOVF   17,W
00DA:  INCF   17,F
00DC:  CLRF   03
00DE:  ADDLW  18
00E0:  MOVWF  FE9
00E2:  MOVLW  00
00E4:  ADDWFC 03,W
00E6:  MOVWF  FEA
00E8:  MOVFF  5B,FEF
....................    } 
00EC:  GOTO   010A (RETURN)
.................... } 
....................  
.................... void inicbuff(void)           // inicializa el buffer, limpiandolo 
.................... { 
....................    int i; 
....................    for (i=0; i<lenbuff;i++)       
*
018C:  CLRF   4D
018E:  MOVF   4D,W
0190:  SUBLW  09
0192:  BNC   01A8
....................    { 
....................       cbuff[i] = 0x00; 
0194:  CLRF   03
0196:  MOVF   4D,W
0198:  ADDLW  18
019A:  MOVWF  FE9
019C:  MOVLW  00
019E:  ADDWFC 03,W
01A0:  MOVWF  FEA
01A2:  CLRF   FEF
01A4:  INCF   4D,F
01A6:  BRA    018E
....................    } 
....................    xbuff=0x00; 
01A8:  CLRF   17
01AA:  GOTO   0344 (RETURN)
.................... } 
....................  
.................... void procesa_cmd(void){             // procesa el ultimo comando guardado, un comando esta comprendido entre $ hasta *  
01AE:  CLRF   42
....................   
....................    int i, j=0;                       
....................    char salida[lenbuff];            // Argumento de comando (si lo tiene) 
....................    disable_interrupts(int_rda);      
01B0:  BCF    F9D.5
....................    flagcmd=0;                       // Desactivo flag de comando pendiente. 
01B2:  BCF    24.0
....................    for (i=0;i<xbuff;i++) 
01B4:  CLRF   41
01B6:  MOVF   17,W
01B8:  SUBWF  41,W
01BA:  BTFSC  FD8.0
01BC:  BRA    0342
....................    { 
....................       if (cbuff[i] == '$'){         // verifica que tenga '$' 
01BE:  CLRF   03
01C0:  MOVF   41,W
01C2:  ADDLW  18
01C4:  MOVWF  FE9
01C6:  MOVLW  00
01C8:  ADDWFC 03,W
01CA:  MOVWF  FEA
01CC:  MOVF   FEF,W
01CE:  SUBLW  24
01D0:  BTFSS  FD8.2
01D2:  BRA    033E
....................          while((cbuff[i] != '*') & (i<xbuff))   // hasta que encuentre * 
01D4:  CLRF   03
01D6:  MOVF   41,W
01D8:  ADDLW  18
01DA:  MOVWF  FE9
01DC:  MOVLW  00
01DE:  ADDWFC 03,W
01E0:  MOVWF  FEA
01E2:  MOVF   FEF,W
01E4:  SUBLW  2A
01E6:  BNZ   01EC
01E8:  MOVLW  00
01EA:  BRA    01EE
01EC:  MOVLW  01
01EE:  MOVWF  4D
01F0:  MOVF   17,W
01F2:  SUBWF  41,W
01F4:  BNC   01FA
01F6:  MOVLW  00
01F8:  BRA    01FC
01FA:  MOVLW  01
01FC:  ANDWF  4D,W
01FE:  BZ    0238
....................          { 
....................             salida[j++]=cbuff[i++]; 
0200:  MOVF   42,W
0202:  INCF   42,F
0204:  CLRF   03
0206:  ADDLW  43
0208:  MOVWF  01
020A:  MOVLW  00
020C:  ADDWFC 03,F
020E:  MOVFF  01,4D
0212:  MOVFF  03,4E
0216:  MOVF   41,W
0218:  INCF   41,F
021A:  CLRF   03
021C:  ADDLW  18
021E:  MOVWF  FE9
0220:  MOVLW  00
0222:  ADDWFC 03,W
0224:  MOVWF  FEA
0226:  MOVFF  FEF,4F
022A:  MOVFF  4E,FEA
022E:  MOVFF  01,FE9
0232:  MOVFF  4F,FEF
0236:  BRA    01D4
....................          } 
....................          comando = salida[1]; 
0238:  MOVFF  44,23
....................          valor2 = salida[2] -'0' + 1; 
023C:  MOVLW  30
023E:  SUBWF  45,W
0240:  ADDLW  01
0242:  MOVWF  29
0244:  CLRF   2A
0246:  CLRF   2B
0248:  CLRF   2C
....................          val1 = salida[2] - '0'; 
024A:  MOVLW  30
024C:  SUBWF  45,W
024E:  MOVWF  2D
0250:  CLRF   2E
0252:  CLRF   2F
0254:  CLRF   30
....................          val1 = val1; 
....................          val2 = salida[3] - '0'; 
0256:  MOVLW  30
0258:  SUBWF  46,W
025A:  MOVWF  31
025C:  CLRF   32
025E:  CLRF   33
0260:  CLRF   34
....................          val2 = val1*10 + val2; 
0262:  MOVFF  30,50
0266:  MOVFF  2F,4F
026A:  MOVFF  2E,4E
026E:  MOVFF  2D,4D
0272:  CLRF   54
0274:  CLRF   53
0276:  CLRF   52
0278:  MOVLW  0A
027A:  MOVWF  51
027C:  RCALL  0138
027E:  MOVF   00,W
0280:  ADDWF  31,F
0282:  MOVF   01,W
0284:  ADDWFC 32,F
0286:  MOVF   02,W
0288:  ADDWFC 33,F
028A:  MOVF   03,W
028C:  ADDWFC 34,F
....................          val3 = salida[4] - '0'; 
028E:  MOVLW  30
0290:  SUBWF  47,W
0292:  MOVWF  35
0294:  CLRF   36
0296:  CLRF   37
0298:  CLRF   38
....................          val3 = val2*10 +val3; 
029A:  MOVFF  34,50
029E:  MOVFF  33,4F
02A2:  MOVFF  32,4E
02A6:  MOVFF  31,4D
02AA:  CLRF   54
02AC:  CLRF   53
02AE:  CLRF   52
02B0:  MOVLW  0A
02B2:  MOVWF  51
02B4:  RCALL  0138
02B6:  MOVF   00,W
02B8:  ADDWF  35,F
02BA:  MOVF   01,W
02BC:  ADDWFC 36,F
02BE:  MOVF   02,W
02C0:  ADDWFC 37,F
02C2:  MOVF   03,W
02C4:  ADDWFC 38,F
....................          val4 = salida[5] - '0'; 
02C6:  MOVLW  30
02C8:  SUBWF  48,W
02CA:  MOVWF  39
02CC:  CLRF   3A
02CE:  CLRF   3B
02D0:  CLRF   3C
....................          val4 = val3*10+val4; 
02D2:  MOVFF  38,50
02D6:  MOVFF  37,4F
02DA:  MOVFF  36,4E
02DE:  MOVFF  35,4D
02E2:  CLRF   54
02E4:  CLRF   53
02E6:  CLRF   52
02E8:  MOVLW  0A
02EA:  MOVWF  51
02EC:  RCALL  0138
02EE:  MOVF   00,W
02F0:  ADDWF  39,F
02F2:  MOVF   01,W
02F4:  ADDWFC 3A,F
02F6:  MOVF   02,W
02F8:  ADDWFC 3B,F
02FA:  MOVF   03,W
02FC:  ADDWFC 3C,F
....................          val5 = salida[6]-'0'; 
02FE:  MOVLW  30
0300:  SUBWF  49,W
0302:  MOVWF  3D
0304:  CLRF   3E
0306:  CLRF   3F
0308:  CLRF   40
....................          valor = val4*10 + val5; 
030A:  MOVFF  3C,50
030E:  MOVFF  3B,4F
0312:  MOVFF  3A,4E
0316:  MOVFF  39,4D
031A:  CLRF   54
031C:  CLRF   53
031E:  CLRF   52
0320:  MOVLW  0A
0322:  MOVWF  51
0324:  RCALL  0138
0326:  MOVF   3D,W
0328:  ADDWF  00,W
032A:  MOVWF  25
032C:  MOVF   3E,W
032E:  ADDWFC 01,W
0330:  MOVWF  26
0332:  MOVF   3F,W
0334:  ADDWFC 02,W
0336:  MOVWF  27
0338:  MOVF   40,W
033A:  ADDWFC 03,W
033C:  MOVWF  28
....................       } 
033E:  INCF   41,F
0340:  BRA    01B6
....................    } 
....................    inicbuff();                            // Borro buffer. 
0342:  BRA    018C
....................    for(i=0;i<lenbuff;i++)                 // Bucle que pone a 0 todos los 
0344:  CLRF   41
0346:  MOVF   41,W
0348:  SUBLW  09
034A:  BNC   0360
....................    { 
....................       salida[i]=0x00;                     // caracteres en el argumento 
034C:  CLRF   03
034E:  MOVF   41,W
0350:  ADDLW  43
0352:  MOVWF  FE9
0354:  MOVLW  00
0356:  ADDWFC 03,W
0358:  MOVWF  FEA
035A:  CLRF   FEF
035C:  INCF   41,F
035E:  BRA    0346
....................    } 
....................    enable_interrupts(int_rda);             
0360:  BSF    F9D.5
0362:  GOTO   03F0 (RETURN)
.................... } 
....................  
.................... void cargar_proceso(int valor2){ 
....................    printf("cargado"); 
0366:  MOVLW  1A
0368:  MOVWF  FF6
036A:  MOVLW  01
036C:  MOVWF  FF7
036E:  CLRF   16
0370:  BTFSC  FF2.7
0372:  BSF    16.7
0374:  BCF    FF2.7
0376:  RCALL  0096
0378:  BTFSC  16.7
037A:  BSF    FF2.7
....................    output_bit(PIN_A0,0); 
037C:  BCF    F89.0
037E:  BCF    F92.0
....................    output_bit(PIN_A1,1); 
0380:  BSF    F89.1
0382:  BCF    F92.1
0384:  GOTO   042E (RETURN)
.................... } 
....................  
.................... void descargar_proceso(int valor2){ 
....................    printf("descargado"); 
0388:  MOVLW  22
038A:  MOVWF  FF6
038C:  MOVLW  01
038E:  MOVWF  FF7
0390:  CLRF   16
0392:  BTFSC  FF2.7
0394:  BSF    16.7
0396:  BCF    FF2.7
0398:  RCALL  0096
039A:  BTFSC  16.7
039C:  BSF    FF2.7
....................    output_bit(PIN_A0,1); 
039E:  BSF    F89.0
03A0:  BCF    F92.0
....................    output_bit(PIN_A1,0); 
03A2:  BCF    F89.1
03A4:  BCF    F92.1
03A6:  GOTO   042E (RETURN)
.................... } 
....................  
.................... void main(void) 
03AA:  CLRF   FF8
03AC:  BCF    FD0.7
03AE:  BSF    07.7
03B0:  BCF    FB8.3
03B2:  MOVLW  40
03B4:  MOVWF  FAF
03B6:  MOVLW  A6
03B8:  MOVWF  FAC
03BA:  MOVLW  90
03BC:  MOVWF  FAB
03BE:  CLRF   17
03C0:  CLRF   22
03C2:  BCF    24.0
03C4:  CLRF   28
03C6:  CLRF   27
03C8:  CLRF   26
03CA:  CLRF   25
03CC:  CLRF   2C
03CE:  CLRF   2B
03D0:  CLRF   2A
03D2:  CLRF   29
03D4:  MOVF   FC1,W
03D6:  ANDLW  C0
03D8:  IORLW  0F
03DA:  MOVWF  FC1
03DC:  MOVLW  07
03DE:  MOVWF  FB4
.................... { 
....................    inte_Init();         // se activa la interrupcion por comunicacion serial 
03E0:  BRA    012E
....................     
....................    set_tris_a(0x00); 
03E2:  MOVLW  00
03E4:  MOVWF  F92
....................    output_a(0x00); 
03E6:  CLRF   F92
03E8:  CLRF   F89
....................     
....................    while(true){ 
....................       if(flagcmd == 1){                // se verifica si se ha recibido un nuevo comando 
03EA:  BTFSS  24.0
03EC:  BRA    03F0
....................          procesa_cmd();                // procesa el comando recibido hasta ese momento 
03EE:  BRA    01AE
....................       } 
....................       switch(comando)                   
03F0:  MOVF   23,W
03F2:  XORLW  43
03F4:  BZ    03FC
03F6:  XORLW  07
03F8:  BZ    0416
03FA:  BRA    042E
....................       { 
....................          case 'C': if (valor2<8){  
03FC:  MOVF   2C,F
03FE:  BNZ   0416
0400:  MOVF   2B,F
0402:  BNZ   0416
0404:  MOVF   2A,F
0406:  BNZ   0416
0408:  MOVF   29,W
040A:  SUBLW  07
040C:  BNC   0416
....................                      cargar_proceso(valor2); 
040E:  MOVFF  29,41
0412:  BRA    0366
....................                      break; 
0414:  BRA    042E
....................                    } 
....................          case 'D': if (valor2<8) { 
0416:  MOVF   2C,F
0418:  BNZ   042E
041A:  MOVF   2B,F
041C:  BNZ   042E
041E:  MOVF   2A,F
0420:  BNZ   042E
0422:  MOVF   29,W
0424:  SUBLW  07
0426:  BNC   042E
....................                      descargar_proceso(valor2); 
0428:  MOVFF  29,41
042C:  BRA    0388
....................                      break; 
....................                    } 
....................       } 
....................       comando='-';                  // anula el comando 
042E:  MOVLW  2D
0430:  MOVWF  23
....................       valor2=100;                   // anula el valor 
0432:  CLRF   2C
0434:  CLRF   2B
0436:  CLRF   2A
0438:  MOVLW  64
043A:  MOVWF  29
....................       valor=0; 
043C:  CLRF   28
043E:  CLRF   27
0440:  CLRF   26
0442:  CLRF   25
0444:  BRA    03EA
....................    } 
.................... } 
....................  
0446:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
