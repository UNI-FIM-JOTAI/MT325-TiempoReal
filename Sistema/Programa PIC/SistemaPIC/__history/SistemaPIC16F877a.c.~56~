#include <16f877a.h>
#device ICD=TRUE
#device adc=10
#fuses HS,NOWDT,NOPROTECT,NOLVP 
#use delay(clock=10000000) 
#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
#use FAST_IO(A) 
#use FAST_IO(B)
#use FAST_IO(C) 


// **************************************
// Definicion de variables y estructuras
char q;
int1 led_num;
int1 led_state;
int quantum;

struct PCB{
   int id;
   int dir_inicio;
   int dir_fin;
   int dir_corriente;
   int acc;
   int estado;
   int estado_proceso;
   int prioridad;
} procesos[7];

// **************************************

// **************************************
// Declaracion de Funciones
void Cargar_configuracion();
void Configurar_interrupciones();
void version();
void encender_led ();
void apagar_led ();
void encender_all ();
void apagar_all ();
void estado_led ();
void activar_timer0 ();
void desactivar_timer0 ();
//***************************************

// **************************************
// FUNCION PRINCIPAL
void main()
{
   Cargar_configuracion();
for(;;){
      q=getch();
      switch(q){
         case 'v': version();
         break;
         case 'e': encender_led();
         break;
         case 'a': apagar_led();
         break;
         case 's': estado_led ();
         break;
         default: printf("Error de comando");
         break;
         }
      delay_ms(100);
   }
}
// **************************************


// ****************************************
// Definicion de las Funciones

void Cargar_configuracion(){
   SET_TRIS_B(0x00);    //configura PORTB entrada / 0=salida / 1=entrada
   OUTPUT_B(0x00);   //inicializando PORTD en 0x00
   //SET_TRIS_D(0x00);    //configura PORTD salida
   }

void Configurar_interrupciones(){
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2);   //Configuración timer0

   //enable_interrupts(INT_RB);       // Habilitando interrupcion RB /RB4-RB7
   //bit_clear(OPTION_REG,7);         // Habilita el Pull-UP de RB->OPTION_REG,RBPU
   //RBPU=0;                            // Habilita el PullUP de RB 
   //enable_interrupts(GLOBAL);       // Habilita las interrupciones
}

void activar_timer0 (){
   set_timer0 (0x1B);                    //Carga del timer0
   enable_interrupts(INT_TIMER0);       //Habilita interrupción timer0
}
void desactivar_timer0 (){
   disable_interrupts(INT_TIMER0);       // Deshabilita interrupción timer0
}

void version(){
   printf("Version de Software: v1");
   }

void encender_led (){
   led_num = 0;
   q=getch();
      switch(q){
         case '0': output_high(PIN_B0);
                   led_num = 1;
         break;
         case '1': output_high(PIN_B1);
                   led_num = 1;
         break;
         case '2': output_high(PIN_B2);
                   led_num = 1;
         break;
         case '3': output_high(PIN_B3);
                   led_num = 1;
         break;
         case '4': output_high(PIN_B4);
                   led_num = 1;
         break;
         case '5': output_high(PIN_B5);
                   led_num = 1;
         break;
         case 'a': encender_all ();
         break;
         default: printf("Led no encontrado");
         break;
         }
      delay_ms(100);
      
   if (led_num == 1){
      printf("Encendido Led %c",q);
   }
}


void apagar_led (){
   led_num = 0;
   q=getch();
      switch(q){
         case '0': output_low(PIN_B0);
                   led_num = 1;
         break;
         case '1': output_low(PIN_B1);
                   led_num = 1;
         break;
         case '2': output_low(PIN_B2);
                   led_num = 1;
         break;
         case '3': output_low(PIN_B3);
                   led_num = 1;
         break;
         case '4': output_low(PIN_B4);
                   led_num = 1;
         break;
         case '5': output_low(PIN_B5);
                   led_num = 1;
         break;
         case 'a': apagar_all ();
         break;
         default: printf("Led no encontrado");
         break;
         }
      delay_ms(100);

   if (led_num == 1){
      printf("Apagado Led %c",q);
   }
}

void encender_all (){
   OUTPUT_B(0xFF);
   printf("Encendidos Todos");
}

void apagar_all (){
   OUTPUT_B(0x00);
   printf("Apagados Todos");
}

void estado_led (){
   led_num = 0;
   q=getch();
      switch(q){
         case '0': led_state = input_state(PIN_B0);
                   led_num = 1;
         break;
         case '1': led_state = input_state(PIN_B1);
                   led_num = 1;
         break;
         case '2': led_state = input_state(PIN_B2);
                   led_num = 1;
         break;
         case '3': led_state = input_state(PIN_B3);
                   led_num = 1;
         break;
         case '4': led_state = input_state(PIN_B4);
                   led_num = 1;
         break;
         case '5': led_state = input_state(PIN_B5);
                   led_num = 1;
         break;
         default: printf("Led no encontrado");
         break;
         }
      delay_ms(100);
   if (led_num == 1){
      if (led_state == 1){
         printf("Led %c encendido",q);
      } else {
         printf("Led %c apagado",q);
      }
   }
}

//*****************************************

